### MESOP, docs: https://google.github.io/mesop/components/box/  && https://google.github.io/mesop/demo/

# under the hood mesop is using angular component and python as base code language

# UI icones can be created from here 
https://fonts.google.com/icons

# watchdog script to restart server doesn't work yet so nee to fix it, don't want to use much space to insatll basel(prod) or ibazel(local)

# kill process on port 32123
sudo kill -9 `sudo lsof -t -i:32123`

# mesop progress bar loading components
different modes: Literal['determinate', 'indeterminate', 'buffer', 'query']

# tweeter api response when posting tweet
Details of the Returned Response
Here's a high-level summary of the key attributes you can expect in the returned Status object:
- id: The unique identifier for the tweet.
- id_str: The string representation of the tweet ID.
- text: The text content of the tweet.
- created_at: The timestamp when the tweet was created.
- user: An object containing information about the user who posted the tweet, including attributes like id, name, screen_name, location, description, and followers_count.
- entities: A dictionary containing details about media, hashtags, mentions, URLs, and other entities within the tweet.
- source: The source from which the tweet was posted (e.g., "Twitter Web App").
- in_reply_to_status_id: The ID of the tweet to which this tweet is a reply, if applicable.
- in_reply_to_user_id: The ID of the user to whom this tweet is a reply, if applicable.
- in_reply_to_screen_name: The screen name of the user to whom this tweet is a reply, if applicable.
- geo: Information about the geographical location associated with the tweet, if available.
- coordinates: The geographical coordinates associated with the tweet, if available.
- place: Information about the place associated with the tweet, if available.
- retweet_count: The number of times this tweet has been retweeted.
- favorite_count: The number of times this tweet has been liked.
- lang: The language of the tweet.
# eg. response:
"""
{
  "id": 1234567890123456789,
  "id_str": "1234567890123456789",
  "text": "This is a sample tweet",
  "created_at": "Wed Oct 10 20:19:24 +0000 2018",
  "user": {
    "id": 9876543210,
    "id_str": "9876543210",
    "name": "Sample User",
    "screen_name": "sampleuser",
    "location": "Sample Location",
    "description": "This is a sample description.",
    "followers_count": 100
  },
  "entities": {
    "hashtags": [],
    "symbols": [],
    "user_mentions": [],
    "urls": []
  },
  "source": "Twitter Web App",
  "in_reply_to_status_id": null,
  "in_reply_to_user_id": null,
  "in_reply_to_screen_name": null,
  "geo": null,
  "coordinates": null,
  "place": null,
  "retweet_count": 0,
  "favorite_count": 0,
  "lang": "en"
}
"""
# get the walues in your code:
response = api.update_status(tweet_message)
print(f"Tweet ID: {response.id}")
print(f"Tweet text: {response.text}")
print(f"Created at: {response.created_at}")
print(f"Posted by: {response.user.screen_name}")

### issues with creaw pydantic version and mesop pydantic version 
will have to create two virtualenv, one for pydantic and the other for crewai agents
will use env vars dynamic file to set values as states of mesop can't be used because of this issue.
will have to set those variables and the logic, code is a bit messy because of that need to refactor code.

So will create a subprocess that will start the agent process and stop it. And use env vars to notify that agents job is done and to have the agent stdout appended to env vars so that the mesop app can read periodically that env var and display it in a popup. When the agent job is done, env var is updated from the agent side before the process stops, the mesop app will then after the process is done update state or fetch that env var to display the button to user to close the popup

eg. of how we will handle state sharing between both mesop and crewai using env vars:
- os.environ["VARIABLE_NAME"] = "VARIABLE_VALUE"
- os.getenv("VARIABLE_NAME") # to get the value
- with open("./dynamic.env", "w", type="utf-8") as dynamic_env_file:
    dynamic_env_file.write('AGENT_DONE="True"\n')

eg. starting the subprocess from mesop app to start agent team and have control to stop it when it is done:
import subprocess
agent_process = subprocess.Popen(['python', 'agent_manager.py'])
if agent_done == 'True':
  agent_process.terminate()

# need to initialize some states and env vars, and, at then end also restore their initial values
Why? because user might want to chat again and post some other tweet for example or create some new reports
therefore, we need to re-initialize state in order to have the code logic work properly and not consider that agent have done their work for example when in the iterative process we need this set to False and only True at then end of the iteration so that the code logic can continue cycling out.
# need toc reate the models in langfuse and also add decorator and callback function to have nice traces. check if we can set the "sessions" as well as for the moment we have been only using, "observation", "generation" and normal types.

# issue with mesop context as it is using flask under the hood, RuntimeError: Working outside of application context:
when running threads to read log files so that it runs independently, it interfers with the container created for the app.
therefore we need to handle that:
RuntimeError: Working outside of application context.
from flask import current_app

def read_log_file(log_file_path):
    with current_app.app_context():
        agent_state = me.state(AgentState)
        time.sleep(2)
        with open(log_file_path, "r", encoding="utf-8") as log_file:
            while not stop_log_reader:
                where = log_file.tell()
                line = log_file.readline()
                if not line:
                    time.sleep(0.1)  # Sleep briefly to avoid busy waiting
                    log_file.seek(where)  # Go back to the last read position
                else:
                    # Update the Mesop state with the new log line
                    agent_state.agent_messages.append(line.strip())
                    # Process the log line
                    print(line.strip())

### LANGFUSE
# use session for traces to have those regroupped under one session ID, source: https://langfuse.com/docs/tracing-features/sessions
from langfuse.decorators import langfuse_context, observe
@observe()
def fn():
    langfuse_context.update_current_trace(
        session_id="your-session-id",  # session
        tags=["tag-1", "tag-2"],       # tags
        metadata={"key":"value"},      # metadata
        user_id="user-id",             # user_id
    )
     
fn()

# from langfuse.decorator library, see all the variabels that can be set using update_current_trace and update_current_observation functions:
def update_current_trace(
  self,
  name: Optional[str] = None,
  user_id: Optional[str] = None,
  session_id: Optional[str] = None,
  version: Optional[str] = None,
  release: Optional[str] = None,
  metadata: Optional[Any] = None,
  tags: Optional[List[str]] = None,
  public: Optional[bool] = None,

def update_current_observation(
  self,
  *,
  input: Optional[Any] = None,
  output: Optional[Any] = None,
  name: Optional[str] = None,
  version: Optional[str] = None,
  metadata: Optional[Any] = None,
  start_time: Optional[datetime] = None,
  end_time: Optional[datetime] = None,
  release: Optional[str] = None,
  tags: Optional[List[str]] = None,
  user_id: Optional[str] = None,
  session_id: Optional[str] = None,
  level: Optional[SpanLevel] = None,
  status_message: Optional[str] = None,
  completion_start_time: Optional[datetime] = None,
  model: Optional[str] = None,
  model_parameters: Optional[Dict[str, MapValue]] = None,
  usage: Optional[Union[BaseModel, ModelUsage]] = None,
  prompt: Optional[PromptClient] = None,
  public: Optional[bool] = None,

# next to do:
- get the agent popup showup when tweet button is pressed and no errors like pressing the button without submitting token/secrets for example
- get the subprocess output displayed inside the popup
- use langfuse to trace all functions and enhance the traces by adding max information using variables that are useful and can be passed in update_current_trace and update_current_observation








































